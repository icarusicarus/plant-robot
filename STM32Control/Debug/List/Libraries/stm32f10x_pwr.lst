###############################################################################
#
# IAR ANSI C/C++ Compiler V9.10.2.313/W64 for ARM         03/Nov/2021  18:48:26
# Copyright 1999-2021 IAR Systems AB.
#
#    Cpu mode          =  thumb
#    Endian            =  little
#    Source file       =
#        C:\Users\juhyeonlee\Desktop\Embedded\Libraries\STM32F10x_StdPeriph_Driver_v3.5\src\stm32f10x_pwr.c
#    Command line      =
#        -f
#        C:\Users\juhyeonlee\Desktop\Embedded\Debug\Obj\Libraries\stm32f10x_pwr.o.rsp
#        (C:\Users\juhyeonlee\Desktop\Embedded\Libraries\STM32F10x_StdPeriph_Driver_v3.5\src\stm32f10x_pwr.c
#        -D USE_STDPERIPH_DRIVER -D STM32F10X_CL -lC
#        C:\Users\juhyeonlee\Desktop\Embedded\Debug\List\Libraries -o
#        C:\Users\juhyeonlee\Desktop\Embedded\Debug\Obj\Libraries --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files\IAR Systems\Embedded Workbench
#        9.0\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Users\juhyeonlee\Desktop\Embedded\user\inc\ -I
#        C:\Users\juhyeonlee\Desktop\Embedded\user\ -I
#        C:\Users\juhyeonlee\Desktop\Embedded\Libraries\CMSIS\DeviceSupport\Startup\
#        -I C:\Users\juhyeonlee\Desktop\Embedded\Libraries\CMSIS\DeviceSupport\
#        -I
#        C:\Users\juhyeonlee\Desktop\Embedded\Libraries\STM32F10x_StdPeriph_Driver_v3.5\inc\
#        -I
#        C:\Users\juhyeonlee\Desktop\Embedded\Libraries\STM32F10x_StdPeriph_Driver_v3.5\src\
#        -I C:\Users\juhyeonlee\Desktop\Embedded\Libraries\LCD\ -Ol -I
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        9.0\arm\CMSIS\Core\Include\\" -I "C:\Program Files\IAR
#        Systems\Embedded Workbench 9.0\arm\CMSIS\DSP\Include\\")
#        --dependencies=n
#        C:\Users\juhyeonlee\Desktop\Embedded\Debug\Obj\Libraries\stm32f10x_pwr.o.d
#    Locale            =  C
#    List file         =
#        C:\Users\juhyeonlee\Desktop\Embedded\Debug\List\Libraries\stm32f10x_pwr.lst
#    Object file       =
#        C:\Users\juhyeonlee\Desktop\Embedded\Debug\Obj\Libraries\stm32f10x_pwr.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#      __size_limit    =  32768|ARM.EW.LINKER
#
###############################################################################

C:\Users\juhyeonlee\Desktop\Embedded\Libraries\STM32F10x_StdPeriph_Driver_v3.5\src\stm32f10x_pwr.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f10x_pwr.c
      4            * @author  MCD Application Team
      5            * @version V3.5.0
      6            * @date    11-March-2011
      7            * @brief   This file provides all the PWR firmware functions.
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     19            ******************************************************************************
     20            */
     21          
     22          /* Includes ------------------------------------------------------------------*/
     23          #include "stm32f10x_pwr.h"
     24          #include "stm32f10x_rcc.h"
     25          
     26          /** @addtogroup STM32F10x_StdPeriph_Driver
     27            * @{
     28            */
     29          
     30          /** @defgroup PWR 
     31            * @brief PWR driver modules
     32            * @{
     33            */ 
     34          
     35          /** @defgroup PWR_Private_TypesDefinitions
     36            * @{
     37            */
     38          
     39          /**
     40            * @}
     41            */
     42          
     43          /** @defgroup PWR_Private_Defines
     44            * @{
     45            */
     46          
     47          /* --------- PWR registers bit address in the alias region ---------- */
     48          #define PWR_OFFSET               (PWR_BASE - PERIPH_BASE)
     49          
     50          /* --- CR Register ---*/
     51          
     52          /* Alias word address of DBP bit */
     53          #define CR_OFFSET                (PWR_OFFSET + 0x00)
     54          #define DBP_BitNumber            0x08
     55          #define CR_DBP_BB                (PERIPH_BB_BASE + (CR_OFFSET * 32) + (DBP_BitNumber * 4))
     56          
     57          /* Alias word address of PVDE bit */
     58          #define PVDE_BitNumber           0x04
     59          #define CR_PVDE_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PVDE_BitNumber * 4))
     60          
     61          /* --- CSR Register ---*/
     62          
     63          /* Alias word address of EWUP bit */
     64          #define CSR_OFFSET               (PWR_OFFSET + 0x04)
     65          #define EWUP_BitNumber           0x08
     66          #define CSR_EWUP_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (EWUP_BitNumber * 4))
     67          
     68          /* ------------------ PWR registers bit mask ------------------------ */
     69          
     70          /* CR register bit mask */
     71          #define CR_DS_MASK               ((uint32_t)0xFFFFFFFC)
     72          #define CR_PLS_MASK              ((uint32_t)0xFFFFFF1F)
     73          
     74          
     75          /**
     76            * @}
     77            */
     78          
     79          /** @defgroup PWR_Private_Macros
     80            * @{
     81            */
     82          
     83          /**
     84            * @}
     85            */
     86          
     87          /** @defgroup PWR_Private_Variables
     88            * @{
     89            */
     90          
     91          /**
     92            * @}
     93            */
     94          
     95          /** @defgroup PWR_Private_FunctionPrototypes
     96            * @{
     97            */
     98          
     99          /**
    100            * @}
    101            */
    102          
    103          /** @defgroup PWR_Private_Functions
    104            * @{
    105            */
    106          
    107          /**
    108            * @brief  Deinitializes the PWR peripheral registers to their default reset values.
    109            * @param  None
    110            * @retval None
    111            */

   \                                 In section .text, align 2, keep-with-next
    112          void PWR_DeInit(void)
    113          {
   \                     PWR_DeInit: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    114            RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
   \        0x2   0x2101             MOVS     R1,#+1
   \        0x4   0xF05F 0x5080      MOVS     R0,#+268435456
   \        0x8   0x.... 0x....      BL       RCC_APB1PeriphResetCmd
    115            RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
   \        0xC   0x2100             MOVS     R1,#+0
   \        0xE   0xF05F 0x5080      MOVS     R0,#+268435456
   \       0x12   0x.... 0x....      BL       RCC_APB1PeriphResetCmd
    116          }
   \       0x16   0xBD01             POP      {R0,PC}
    117          
    118          /**
    119            * @brief  Enables or disables access to the RTC and backup registers.
    120            * @param  NewState: new state of the access to the RTC and backup registers.
    121            *   This parameter can be: ENABLE or DISABLE.
    122            * @retval None
    123            */

   \                                 In section .text, align 2, keep-with-next
    124          void PWR_BackupAccessCmd(FunctionalState NewState)
    125          {
    126            /* Check the parameters */
    127            //assert_param(IS_FUNCTIONAL_STATE(NewState));
    128            *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
   \                     PWR_BackupAccessCmd: (+1)
   \        0x0   0xB2C0             UXTB     R0,R0
   \        0x2   0x....             LDR.N    R1,??DataTable8
   \        0x4   0x6008             STR      R0,[R1, #+0]
    129          }
   \        0x6   0x4770             BX       LR
    130          
    131          /**
    132            * @brief  Enables or disables the Power Voltage Detector(PVD).
    133            * @param  NewState: new state of the PVD.
    134            *   This parameter can be: ENABLE or DISABLE.
    135            * @retval None
    136            */

   \                                 In section .text, align 2, keep-with-next
    137          void PWR_PVDCmd(FunctionalState NewState)
    138          {
    139            /* Check the parameters */
    140            //assert_param(IS_FUNCTIONAL_STATE(NewState));
    141            *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
   \                     PWR_PVDCmd: (+1)
   \        0x0   0xB2C0             UXTB     R0,R0
   \        0x2   0x....             LDR.N    R1,??DataTable8_1
   \        0x4   0x6008             STR      R0,[R1, #+0]
    142          }
   \        0x6   0x4770             BX       LR
    143          
    144          /**
    145            * @brief  Configures the voltage threshold detected by the Power Voltage Detector(PVD).
    146            * @param  PWR_PVDLevel: specifies the PVD detection level
    147            *   This parameter can be one of the following values:
    148            *     @arg PWR_PVDLevel_2V2: PVD detection level set to 2.2V
    149            *     @arg PWR_PVDLevel_2V3: PVD detection level set to 2.3V
    150            *     @arg PWR_PVDLevel_2V4: PVD detection level set to 2.4V
    151            *     @arg PWR_PVDLevel_2V5: PVD detection level set to 2.5V
    152            *     @arg PWR_PVDLevel_2V6: PVD detection level set to 2.6V
    153            *     @arg PWR_PVDLevel_2V7: PVD detection level set to 2.7V
    154            *     @arg PWR_PVDLevel_2V8: PVD detection level set to 2.8V
    155            *     @arg PWR_PVDLevel_2V9: PVD detection level set to 2.9V
    156            * @retval None
    157            */

   \                                 In section .text, align 2, keep-with-next
    158          void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
    159          {
    160            uint32_t tmpreg = 0;
   \                     PWR_PVDLevelConfig: (+1)
   \        0x0   0x2100             MOVS     R1,#+0
    161            /* Check the parameters */
    162            //assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
    163            tmpreg = PWR->CR;
   \        0x2   0x....             LDR.N    R1,??DataTable8_2
   \        0x4   0x6809             LDR      R1,[R1, #+0]
    164            /* Clear PLS[7:5] bits */
    165            tmpreg &= CR_PLS_MASK;
   \        0x6   0xF031 0x01E0      BICS     R1,R1,#0xE0
    166            /* Set PLS[7:5] bits according to PWR_PVDLevel value */
    167            tmpreg |= PWR_PVDLevel;
   \        0xA   0x4308             ORRS     R0,R0,R1
    168            /* Store the new value */
    169            PWR->CR = tmpreg;
   \        0xC   0x....             LDR.N    R1,??DataTable8_2
   \        0xE   0x6008             STR      R0,[R1, #+0]
    170          }
   \       0x10   0x4770             BX       LR
    171          
    172          /**
    173            * @brief  Enables or disables the WakeUp Pin functionality.
    174            * @param  NewState: new state of the WakeUp Pin functionality.
    175            *   This parameter can be: ENABLE or DISABLE.
    176            * @retval None
    177            */

   \                                 In section .text, align 2, keep-with-next
    178          void PWR_WakeUpPinCmd(FunctionalState NewState)
    179          {
    180            /* Check the parameters */
    181            //assert_param(IS_FUNCTIONAL_STATE(NewState));
    182            *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
   \                     PWR_WakeUpPinCmd: (+1)
   \        0x0   0xB2C0             UXTB     R0,R0
   \        0x2   0x....             LDR.N    R1,??DataTable8_3
   \        0x4   0x6008             STR      R0,[R1, #+0]
    183          }
   \        0x6   0x4770             BX       LR
    184          
    185          /**
    186            * @brief  Enters STOP mode.
    187            * @param  PWR_Regulator: specifies the regulator state in STOP mode.
    188            *   This parameter can be one of the following values:
    189            *     @arg PWR_Regulator_ON: STOP mode with regulator ON
    190            *     @arg PWR_Regulator_LowPower: STOP mode with regulator in low power mode
    191            * @param  PWR_STOPEntry: specifies if STOP mode in entered with WFI or WFE instruction.
    192            *   This parameter can be one of the following values:
    193            *     @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
    194            *     @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
    195            * @retval None
    196            */

   \                                 In section .text, align 2, keep-with-next
    197          void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
    198          {
    199            uint32_t tmpreg = 0;
   \                     PWR_EnterSTOPMode: (+1)
   \        0x0   0x2200             MOVS     R2,#+0
    200            /* Check the parameters */
    201            //assert_param(IS_PWR_REGULATOR(PWR_Regulator));
    202            //assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
    203            
    204            /* Select the regulator state in STOP mode ---------------------------------*/
    205            tmpreg = PWR->CR;
   \        0x2   0x....             LDR.N    R2,??DataTable8_2
   \        0x4   0x6812             LDR      R2,[R2, #+0]
    206            /* Clear PDDS and LPDS bits */
    207            tmpreg &= CR_DS_MASK;
   \        0x6   0x0892             LSRS     R2,R2,#+2
   \        0x8   0x0092             LSLS     R2,R2,#+2
    208            /* Set LPDS bit according to PWR_Regulator value */
    209            tmpreg |= PWR_Regulator;
   \        0xA   0x4310             ORRS     R0,R0,R2
    210            /* Store the new value */
    211            PWR->CR = tmpreg;
   \        0xC   0x....             LDR.N    R2,??DataTable8_2
   \        0xE   0x6010             STR      R0,[R2, #+0]
    212            /* Set SLEEPDEEP bit of Cortex System Control Register */
    213            SCB->SCR |= SCB_SCR_SLEEPDEEP;
   \       0x10   0x....             LDR.N    R0,??DataTable8_4
   \       0x12   0x6800             LDR      R0,[R0, #+0]
   \       0x14   0xF050 0x0004      ORRS     R0,R0,#0x4
   \       0x18   0x....             LDR.N    R2,??DataTable8_4
   \       0x1A   0x6010             STR      R0,[R2, #+0]
    214            
    215            /* Select STOP mode entry --------------------------------------------------*/
    216            if(PWR_STOPEntry == PWR_STOPEntry_WFI)
   \       0x1C   0xB2C9             UXTB     R1,R1
   \       0x1E   0x2901             CMP      R1,#+1
   \       0x20   0xD101             BNE.N    ??PWR_EnterSTOPMode_0
    217            {   
    218              /* Request Wait For Interrupt */
    219              __WFI();
   \       0x22   0xBF30             WFI
   \       0x24   0xE000             B.N      ??PWR_EnterSTOPMode_1
    220            }
    221            else
    222            {
    223              /* Request Wait For Event */
    224              __WFE();
   \                     ??PWR_EnterSTOPMode_0: (+1)
   \       0x26   0xBF20             WFE
    225            }
    226            
    227            /* Reset SLEEPDEEP bit of Cortex System Control Register */
    228            SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP);  
   \                     ??PWR_EnterSTOPMode_1: (+1)
   \       0x28   0x....             LDR.N    R0,??DataTable8_4
   \       0x2A   0x6800             LDR      R0,[R0, #+0]
   \       0x2C   0xF030 0x0004      BICS     R0,R0,#0x4
   \       0x30   0x....             LDR.N    R1,??DataTable8_4
   \       0x32   0x6008             STR      R0,[R1, #+0]
    229          }
   \       0x34   0x4770             BX       LR
    230          
    231          /**
    232            * @brief  Enters STANDBY mode.
    233            * @param  None
    234            * @retval None
    235            */

   \                                 In section .text, align 2, keep-with-next
    236          void PWR_EnterSTANDBYMode(void)
    237          {
    238            /* Clear Wake-up flag */
    239            PWR->CR |= PWR_CR_CWUF;
   \                     PWR_EnterSTANDBYMode: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable8_2
   \        0x2   0x6800             LDR      R0,[R0, #+0]
   \        0x4   0xF050 0x0004      ORRS     R0,R0,#0x4
   \        0x8   0x....             LDR.N    R1,??DataTable8_2
   \        0xA   0x6008             STR      R0,[R1, #+0]
    240            /* Select STANDBY mode */
    241            PWR->CR |= PWR_CR_PDDS;
   \        0xC   0x....             LDR.N    R0,??DataTable8_2
   \        0xE   0x6800             LDR      R0,[R0, #+0]
   \       0x10   0xF050 0x0002      ORRS     R0,R0,#0x2
   \       0x14   0x....             LDR.N    R1,??DataTable8_2
   \       0x16   0x6008             STR      R0,[R1, #+0]
    242            /* Set SLEEPDEEP bit of Cortex System Control Register */
    243            SCB->SCR |= SCB_SCR_SLEEPDEEP;
   \       0x18   0x....             LDR.N    R0,??DataTable8_4
   \       0x1A   0x6800             LDR      R0,[R0, #+0]
   \       0x1C   0xF050 0x0004      ORRS     R0,R0,#0x4
   \       0x20   0x....             LDR.N    R1,??DataTable8_4
   \       0x22   0x6008             STR      R0,[R1, #+0]
    244          /* This option is used to ensure that store operations are completed */
    245          #if defined ( __CC_ARM   )
    246            __force_stores();
    247          #endif
    248            /* Request Wait For Interrupt */
    249            __WFI();
   \       0x24   0xBF30             WFI
    250          }
   \       0x26   0x4770             BX       LR
    251          
    252          /**
    253            * @brief  Checks whether the specified PWR flag is set or not.
    254            * @param  PWR_FLAG: specifies the flag to check.
    255            *   This parameter can be one of the following values:
    256            *     @arg PWR_FLAG_WU: Wake Up flag
    257            *     @arg PWR_FLAG_SB: StandBy flag
    258            *     @arg PWR_FLAG_PVDO: PVD Output
    259            * @retval The new state of PWR_FLAG (SET or RESET).
    260            */

   \                                 In section .text, align 2, keep-with-next
    261          FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
    262          {
    263            FlagStatus bitstatus = RESET;
   \                     PWR_GetFlagStatus: (+1)
   \        0x0   0x2100             MOVS     R1,#+0
    264            /* Check the parameters */
    265            //assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
    266            
    267            if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
   \        0x2   0x....             LDR.N    R1,??DataTable8_5
   \        0x4   0x6809             LDR      R1,[R1, #+0]
   \        0x6   0x4201             TST      R1,R0
   \        0x8   0xD001             BEQ.N    ??PWR_GetFlagStatus_0
    268            {
    269              bitstatus = SET;
   \        0xA   0x2001             MOVS     R0,#+1
   \        0xC   0xE000             B.N      ??PWR_GetFlagStatus_1
    270            }
    271            else
    272            {
    273              bitstatus = RESET;
   \                     ??PWR_GetFlagStatus_0: (+1)
   \        0xE   0x2000             MOVS     R0,#+0
    274            }
    275            /* Return the flag status */
    276            return bitstatus;
   \                     ??PWR_GetFlagStatus_1: (+1)
   \       0x10   0xB2C0             UXTB     R0,R0
   \       0x12   0x4770             BX       LR
    277          }
    278          
    279          /**
    280            * @brief  Clears the PWR's pending flags.
    281            * @param  PWR_FLAG: specifies the flag to clear.
    282            *   This parameter can be one of the following values:
    283            *     @arg PWR_FLAG_WU: Wake Up flag
    284            *     @arg PWR_FLAG_SB: StandBy flag
    285            * @retval None
    286            */

   \                                 In section .text, align 2, keep-with-next
    287          void PWR_ClearFlag(uint32_t PWR_FLAG)
    288          {
    289            /* Check the parameters */
    290            //assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
    291                   
    292            PWR->CR |=  PWR_FLAG << 2;
   \                     PWR_ClearFlag: (+1)
   \        0x0   0x....             LDR.N    R1,??DataTable8_2
   \        0x2   0x6809             LDR      R1,[R1, #+0]
   \        0x4   0xEA51 0x0180      ORRS     R1,R1,R0, LSL #+2
   \        0x8   0x....             LDR.N    R0,??DataTable8_2
   \        0xA   0x6001             STR      R1,[R0, #+0]
    293          }
   \        0xC   0x4770             BX       LR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \        0x0   0x420E'0020        DC32     0x420e0020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \        0x0   0x420E'0010        DC32     0x420e0010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \        0x0   0x4000'7000        DC32     0x40007000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \        0x0   0x420E'00A0        DC32     0x420e00a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \        0x0   0xE000'ED10        DC32     0xe000ed10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \        0x0   0x4000'7004        DC32     0x40007004
    294          
    295          /**
    296            * @}
    297            */
    298          
    299          /**
    300            * @}
    301            */
    302          
    303          /**
    304            * @}
    305            */
    306          
    307          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   PWR_BackupAccessCmd
       0   PWR_ClearFlag
       8   PWR_DeInit
         8   -> RCC_APB1PeriphResetCmd
       0   PWR_EnterSTANDBYMode
       0   PWR_EnterSTOPMode
       0   PWR_GetFlagStatus
       0   PWR_PVDCmd
       0   PWR_PVDLevelConfig
       0   PWR_WakeUpPinCmd


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_2
       4  ??DataTable8_3
       4  ??DataTable8_4
       4  ??DataTable8_5
       8  PWR_BackupAccessCmd
      14  PWR_ClearFlag
      24  PWR_DeInit
      40  PWR_EnterSTANDBYMode
      54  PWR_EnterSTOPMode
      20  PWR_GetFlagStatus
       8  PWR_PVDCmd
      18  PWR_PVDLevelConfig
       8  PWR_WakeUpPinCmd

 
 218 bytes in section .text
 
 218 bytes of CODE memory

Errors: none
Warnings: none
