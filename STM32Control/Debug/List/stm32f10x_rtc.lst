###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       22/Nov/2021  19:36:24
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\pnu3\Desktop\Embedded-main\Libraries\STM32F10x_StdPeriph_Driver_v3.5\src\stm32f10x_rtc.c
#    Command line =  
#        -f C:\Users\pnu3\AppData\Local\Temp\EWF1B1.tmp
#        (C:\Users\pnu3\Desktop\Embedded-main\Libraries\STM32F10x_StdPeriph_Driver_v3.5\src\stm32f10x_rtc.c
#        -D USE_STDPERIPH_DRIVER -D STM32F10X_CL -lC
#        C:\Users\pnu3\Desktop\Embedded-main\Debug\List -o
#        C:\Users\pnu3\Desktop\Embedded-main\Debug\Obj --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\pnu3\Desktop\Embedded-main\Libraries\CMSIS\DeviceSupport\Startup\
#        -I C:\Users\pnu3\Desktop\Embedded-main\Libraries\CMSIS\DeviceSupport\
#        -I C:\Users\pnu3\Desktop\Embedded-main\Libraries\LCD\ -I
#        C:\Users\pnu3\Desktop\Embedded-main\Libraries\STM32F10x_StdPeriph_Driver_v3.5\inc\
#        -I
#        C:\Users\pnu3\Desktop\Embedded-main\Libraries\STM32F10x_StdPeriph_Driver_v3.5\src\
#        -I C:\Users\pnu3\Desktop\Embedded-main\user\inc\ -I
#        C:\Users\pnu3\Desktop\Embedded-main\user\ -I
#        C:\Users\pnu3\Desktop\Embedded-main\Libraries\DHT11\ -Ol -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  
#        C:\Users\pnu3\Desktop\Embedded-main\Debug\List\stm32f10x_rtc.lst
#    Object file  =  
#        C:\Users\pnu3\Desktop\Embedded-main\Debug\Obj\stm32f10x_rtc.o
#
###############################################################################

C:\Users\pnu3\Desktop\Embedded-main\Libraries\STM32F10x_StdPeriph_Driver_v3.5\src\stm32f10x_rtc.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f10x_rtc.c
      4            * @author  MCD Application Team
      5            * @version V3.5.0
      6            * @date    11-March-2011
      7            * @brief   This file provides all the RTC firmware functions.
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     19            ******************************************************************************
     20            */
     21          
     22          /* Includes ------------------------------------------------------------------*/
     23          #include "stm32f10x_rtc.h"
     24          
     25          /** @addtogroup STM32F10x_StdPeriph_Driver
     26            * @{
     27            */
     28          
     29          /** @defgroup RTC 
     30            * @brief RTC driver modules
     31            * @{
     32            */
     33          
     34          /** @defgroup RTC_Private_TypesDefinitions
     35            * @{
     36            */ 
     37          /**
     38            * @}
     39            */
     40          
     41          /** @defgroup RTC_Private_Defines
     42            * @{
     43            */
     44          #define RTC_LSB_MASK     ((uint32_t)0x0000FFFF)  /*!< RTC LSB Mask */
     45          #define PRLH_MSB_MASK    ((uint32_t)0x000F0000)  /*!< RTC Prescaler MSB Mask */
     46          
     47          /**
     48            * @}
     49            */
     50          
     51          /** @defgroup RTC_Private_Macros
     52            * @{
     53            */
     54          
     55          /**
     56            * @}
     57            */
     58          
     59          /** @defgroup RTC_Private_Variables
     60            * @{
     61            */
     62          
     63          /**
     64            * @}
     65            */
     66          
     67          /** @defgroup RTC_Private_FunctionPrototypes
     68            * @{
     69            */
     70          
     71          /**
     72            * @}
     73            */
     74          
     75          /** @defgroup RTC_Private_Functions
     76            * @{
     77            */
     78          
     79          /**
     80            * @brief  Enables or disables the specified RTC interrupts.
     81            * @param  RTC_IT: specifies the RTC interrupts sources to be enabled or disabled.
     82            *   This parameter can be any combination of the following values:
     83            *     @arg RTC_IT_OW: Overflow interrupt
     84            *     @arg RTC_IT_ALR: Alarm interrupt
     85            *     @arg RTC_IT_SEC: Second interrupt
     86            * @param  NewState: new state of the specified RTC interrupts.
     87            *   This parameter can be: ENABLE or DISABLE.
     88            * @retval None
     89            */

   \                                 In section .text, align 2, keep-with-next
     90          void RTC_ITConfig(uint16_t RTC_IT, FunctionalState NewState)
     91          {
     92            /* Check the parameters */
     93            //assert_param(IS_RTC_IT(RTC_IT));
     94            //assert_param(IS_FUNCTIONAL_STATE(NewState));
     95            
     96            if (NewState != DISABLE)
   \                     RTC_ITConfig: (+1)
   \   00000000   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000002   0x2900             CMP      R1,#+0
   \   00000004   0xD005             BEQ.N    ??RTC_ITConfig_0
     97            {
     98              RTC->CRH |= RTC_IT;
   \   00000006   0x....             LDR.N    R1,??DataTable13  ;; 0x40002800
   \   00000008   0x8809             LDRH     R1,[R1, #+0]
   \   0000000A   0x4308             ORRS     R0,R0,R1
   \   0000000C   0x....             LDR.N    R1,??DataTable13  ;; 0x40002800
   \   0000000E   0x8008             STRH     R0,[R1, #+0]
   \   00000010   0xE005             B.N      ??RTC_ITConfig_1
     99            }
    100            else
    101            {
    102              RTC->CRH &= (uint16_t)~RTC_IT;
   \                     ??RTC_ITConfig_0: (+1)
   \   00000012   0x....             LDR.N    R1,??DataTable13  ;; 0x40002800
   \   00000014   0x8809             LDRH     R1,[R1, #+0]
   \   00000016   0xEA31 0x0000      BICS     R0,R1,R0
   \   0000001A   0x....             LDR.N    R1,??DataTable13  ;; 0x40002800
   \   0000001C   0x8008             STRH     R0,[R1, #+0]
    103            }
    104          }
   \                     ??RTC_ITConfig_1: (+1)
   \   0000001E   0x4770             BX       LR               ;; return
    105          
    106          /**
    107            * @brief  Enters the RTC configuration mode.
    108            * @param  None
    109            * @retval None
    110            */

   \                                 In section .text, align 2, keep-with-next
    111          void RTC_EnterConfigMode(void)
    112          {
    113            /* Set the CNF flag to enter in the Configuration Mode */
    114            RTC->CRL |= RTC_CRL_CNF;
   \                     RTC_EnterConfigMode: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable13_1  ;; 0x40002804
   \   00000002   0x8800             LDRH     R0,[R0, #+0]
   \   00000004   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   00000008   0x....             LDR.N    R1,??DataTable13_1  ;; 0x40002804
   \   0000000A   0x8008             STRH     R0,[R1, #+0]
    115          }
   \   0000000C   0x4770             BX       LR               ;; return
    116          
    117          /**
    118            * @brief  Exits from the RTC configuration mode.
    119            * @param  None
    120            * @retval None
    121            */

   \                                 In section .text, align 2, keep-with-next
    122          void RTC_ExitConfigMode(void)
    123          {
    124            /* Reset the CNF flag to exit from the Configuration Mode */
    125            RTC->CRL &= (uint16_t)~((uint16_t)RTC_CRL_CNF); 
   \                     RTC_ExitConfigMode: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable13_1  ;; 0x40002804
   \   00000002   0x8801             LDRH     R1,[R0, #+0]
   \   00000004   0xF64F 0x70EF      MOVW     R0,#+65519
   \   00000008   0x4001             ANDS     R1,R0,R1
   \   0000000A   0x....             LDR.N    R0,??DataTable13_1  ;; 0x40002804
   \   0000000C   0x8001             STRH     R1,[R0, #+0]
    126          }
   \   0000000E   0x4770             BX       LR               ;; return
    127          
    128          /**
    129            * @brief  Gets the RTC counter value.
    130            * @param  None
    131            * @retval RTC counter value.
    132            */

   \                                 In section .text, align 2, keep-with-next
    133          uint32_t RTC_GetCounter(void)
    134          {
    135            uint16_t tmp = 0;
   \                     RTC_GetCounter: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
    136            tmp = RTC->CNTL;
   \   00000002   0x....             LDR.N    R0,??DataTable13_2  ;; 0x4000281c
   \   00000004   0x8800             LDRH     R0,[R0, #+0]
    137            return (((uint32_t)RTC->CNTH << 16 ) | tmp) ;
   \   00000006   0x....             LDR.N    R1,??DataTable13_3  ;; 0x40002818
   \   00000008   0x8809             LDRH     R1,[R1, #+0]
   \   0000000A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000000C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000E   0xEA50 0x4001      ORRS     R0,R0,R1, LSL #+16
   \   00000012   0x4770             BX       LR               ;; return
    138          }
    139          
    140          /**
    141            * @brief  Sets the RTC counter value.
    142            * @param  CounterValue: RTC counter new value.
    143            * @retval None
    144            */

   \                                 In section .text, align 2, keep-with-next
    145          void RTC_SetCounter(uint32_t CounterValue)
    146          { 
   \                     RTC_SetCounter: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    147            RTC_EnterConfigMode();
   \   00000004   0x.... 0x....      BL       RTC_EnterConfigMode
    148            /* Set RTC COUNTER MSB word */
    149            RTC->CNTH = CounterValue >> 16;
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x0C00             LSRS     R0,R0,#+16
   \   0000000C   0x....             LDR.N    R1,??DataTable13_3  ;; 0x40002818
   \   0000000E   0x8008             STRH     R0,[R1, #+0]
    150            /* Set RTC COUNTER LSB word */
    151            RTC->CNTL = (CounterValue & RTC_LSB_MASK);
   \   00000010   0x....             LDR.N    R0,??DataTable13_2  ;; 0x4000281c
   \   00000012   0x8004             STRH     R4,[R0, #+0]
    152            RTC_ExitConfigMode();
   \   00000014   0x.... 0x....      BL       RTC_ExitConfigMode
    153          }
   \   00000018   0xBD10             POP      {R4,PC}          ;; return
    154          
    155          /**
    156            * @brief  Sets the RTC prescaler value.
    157            * @param  PrescalerValue: RTC prescaler new value.
    158            * @retval None
    159            */

   \                                 In section .text, align 2, keep-with-next
    160          void RTC_SetPrescaler(uint32_t PrescalerValue)
    161          {
   \                     RTC_SetPrescaler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    162            /* Check the parameters */
    163            //assert_param(IS_RTC_PRESCALER(PrescalerValue));
    164            
    165            RTC_EnterConfigMode();
   \   00000004   0x.... 0x....      BL       RTC_EnterConfigMode
    166            /* Set RTC PRESCALER MSB word */
    167            RTC->PRLH = (PrescalerValue & PRLH_MSB_MASK) >> 16;
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x0C00             LSRS     R0,R0,#+16
   \   0000000C   0xF010 0x000F      ANDS     R0,R0,#0xF
   \   00000010   0x....             LDR.N    R1,??DataTable13_4  ;; 0x40002808
   \   00000012   0x8008             STRH     R0,[R1, #+0]
    168            /* Set RTC PRESCALER LSB word */
    169            RTC->PRLL = (PrescalerValue & RTC_LSB_MASK);
   \   00000014   0x....             LDR.N    R0,??DataTable13_5  ;; 0x4000280c
   \   00000016   0x8004             STRH     R4,[R0, #+0]
    170            RTC_ExitConfigMode();
   \   00000018   0x.... 0x....      BL       RTC_ExitConfigMode
    171          }
   \   0000001C   0xBD10             POP      {R4,PC}          ;; return
    172          
    173          /**
    174            * @brief  Sets the RTC alarm value.
    175            * @param  AlarmValue: RTC alarm new value.
    176            * @retval None
    177            */

   \                                 In section .text, align 2, keep-with-next
    178          void RTC_SetAlarm(uint32_t AlarmValue)
    179          {  
   \                     RTC_SetAlarm: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    180            RTC_EnterConfigMode();
   \   00000004   0x.... 0x....      BL       RTC_EnterConfigMode
    181            /* Set the ALARM MSB word */
    182            RTC->ALRH = AlarmValue >> 16;
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x0C00             LSRS     R0,R0,#+16
   \   0000000C   0x....             LDR.N    R1,??DataTable13_6  ;; 0x40002820
   \   0000000E   0x8008             STRH     R0,[R1, #+0]
    183            /* Set the ALARM LSB word */
    184            RTC->ALRL = (AlarmValue & RTC_LSB_MASK);
   \   00000010   0x....             LDR.N    R0,??DataTable13_7  ;; 0x40002824
   \   00000012   0x8004             STRH     R4,[R0, #+0]
    185            RTC_ExitConfigMode();
   \   00000014   0x.... 0x....      BL       RTC_ExitConfigMode
    186          }
   \   00000018   0xBD10             POP      {R4,PC}          ;; return
    187          
    188          /**
    189            * @brief  Gets the RTC divider value.
    190            * @param  None
    191            * @retval RTC Divider value.
    192            */

   \                                 In section .text, align 2, keep-with-next
    193          uint32_t RTC_GetDivider(void)
    194          {
    195            uint32_t tmp = 0x00;
   \                     RTC_GetDivider: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
    196            tmp = ((uint32_t)RTC->DIVH & (uint32_t)0x000F) << 16;
   \   00000002   0x....             LDR.N    R0,??DataTable13_8  ;; 0x40002810
   \   00000004   0x8800             LDRH     R0,[R0, #+0]
   \   00000006   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000008   0x0400             LSLS     R0,R0,#+16
   \   0000000A   0xF410 0x2070      ANDS     R0,R0,#0xF0000
    197            tmp |= RTC->DIVL;
   \   0000000E   0x....             LDR.N    R1,??DataTable13_9  ;; 0x40002814
   \   00000010   0x8809             LDRH     R1,[R1, #+0]
   \   00000012   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000014   0x4308             ORRS     R0,R1,R0
    198            return tmp;
   \   00000016   0x4770             BX       LR               ;; return
    199          }
    200          
    201          /**
    202            * @brief  Waits until last write operation on RTC registers has finished.
    203            * @note   This function must be called before any write to RTC registers.
    204            * @param  None
    205            * @retval None
    206            */

   \                                 In section .text, align 2, keep-with-next
    207          void RTC_WaitForLastTask(void)
    208          {
    209            /* Loop until RTOFF flag is set */
    210            while ((RTC->CRL & RTC_FLAG_RTOFF) == (uint16_t)RESET)
   \                     RTC_WaitForLastTask: (+1)
   \                     ??RTC_WaitForLastTask_0: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable13_1  ;; 0x40002804
   \   00000002   0x8800             LDRH     R0,[R0, #+0]
   \   00000004   0x0680             LSLS     R0,R0,#+26
   \   00000006   0xD5FB             BPL.N    ??RTC_WaitForLastTask_0
    211            {
    212            }
    213          }
   \   00000008   0x4770             BX       LR               ;; return
    214          
    215          /**
    216            * @brief  Waits until the RTC registers (RTC_CNT, RTC_ALR and RTC_PRL)
    217            *   are synchronized with RTC APB clock.
    218            * @note   This function must be called before any read operation after an APB reset
    219            *   or an APB clock stop.
    220            * @param  None
    221            * @retval None
    222            */

   \                                 In section .text, align 2, keep-with-next
    223          void RTC_WaitForSynchro(void)
    224          {
    225            /* Clear RSF flag */
    226            RTC->CRL &= (uint16_t)~RTC_FLAG_RSF;
   \                     RTC_WaitForSynchro: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable13_1  ;; 0x40002804
   \   00000002   0x8801             LDRH     R1,[R0, #+0]
   \   00000004   0xF64F 0x70F7      MOVW     R0,#+65527
   \   00000008   0x4001             ANDS     R1,R0,R1
   \   0000000A   0x....             LDR.N    R0,??DataTable13_1  ;; 0x40002804
   \   0000000C   0x8001             STRH     R1,[R0, #+0]
    227            /* Loop until RSF flag is set */
    228            while ((RTC->CRL & RTC_FLAG_RSF) == (uint16_t)RESET)
   \                     ??RTC_WaitForSynchro_0: (+1)
   \   0000000E   0x....             LDR.N    R0,??DataTable13_1  ;; 0x40002804
   \   00000010   0x8800             LDRH     R0,[R0, #+0]
   \   00000012   0x0700             LSLS     R0,R0,#+28
   \   00000014   0xD5FB             BPL.N    ??RTC_WaitForSynchro_0
    229            {
    230            }
    231          }
   \   00000016   0x4770             BX       LR               ;; return
    232          
    233          /**
    234            * @brief  Checks whether the specified RTC flag is set or not.
    235            * @param  RTC_FLAG: specifies the flag to check.
    236            *   This parameter can be one the following values:
    237            *     @arg RTC_FLAG_RTOFF: RTC Operation OFF flag
    238            *     @arg RTC_FLAG_RSF: Registers Synchronized flag
    239            *     @arg RTC_FLAG_OW: Overflow flag
    240            *     @arg RTC_FLAG_ALR: Alarm flag
    241            *     @arg RTC_FLAG_SEC: Second flag
    242            * @retval The new state of RTC_FLAG (SET or RESET).
    243            */

   \                                 In section .text, align 2, keep-with-next
    244          FlagStatus RTC_GetFlagStatus(uint16_t RTC_FLAG)
    245          {
    246            FlagStatus bitstatus = RESET;
   \                     RTC_GetFlagStatus: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
    247            
    248            /* Check the parameters */
    249            //assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
    250            
    251            if ((RTC->CRL & RTC_FLAG) != (uint16_t)RESET)
   \   00000002   0x....             LDR.N    R1,??DataTable13_1  ;; 0x40002804
   \   00000004   0x8809             LDRH     R1,[R1, #+0]
   \   00000006   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000008   0x4201             TST      R1,R0
   \   0000000A   0xD001             BEQ.N    ??RTC_GetFlagStatus_0
    252            {
    253              bitstatus = SET;
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0xE000             B.N      ??RTC_GetFlagStatus_1
    254            }
    255            else
    256            {
    257              bitstatus = RESET;
   \                     ??RTC_GetFlagStatus_0: (+1)
   \   00000010   0x2000             MOVS     R0,#+0
    258            }
    259            return bitstatus;
   \                     ??RTC_GetFlagStatus_1: (+1)
   \   00000012   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   0x4770             BX       LR               ;; return
    260          }
    261          
    262          /**
    263            * @brief  Clears the RTC's pending flags.
    264            * @param  RTC_FLAG: specifies the flag to clear.
    265            *   This parameter can be any combination of the following values:
    266            *     @arg RTC_FLAG_RSF: Registers Synchronized flag. This flag is cleared only after
    267            *                        an APB reset or an APB Clock stop.
    268            *     @arg RTC_FLAG_OW: Overflow flag
    269            *     @arg RTC_FLAG_ALR: Alarm flag
    270            *     @arg RTC_FLAG_SEC: Second flag
    271            * @retval None
    272            */

   \                                 In section .text, align 2, keep-with-next
    273          void RTC_ClearFlag(uint16_t RTC_FLAG)
    274          {
    275            /* Check the parameters */
    276            //assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));
    277              
    278            /* Clear the corresponding RTC flag */
    279            RTC->CRL &= (uint16_t)~RTC_FLAG;
   \                     RTC_ClearFlag: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable13_1  ;; 0x40002804
   \   00000002   0x8809             LDRH     R1,[R1, #+0]
   \   00000004   0xEA31 0x0000      BICS     R0,R1,R0
   \   00000008   0x....             LDR.N    R1,??DataTable13_1  ;; 0x40002804
   \   0000000A   0x8008             STRH     R0,[R1, #+0]
    280          }
   \   0000000C   0x4770             BX       LR               ;; return
    281          
    282          /**
    283            * @brief  Checks whether the specified RTC interrupt has occurred or not.
    284            * @param  RTC_IT: specifies the RTC interrupts sources to check.
    285            *   This parameter can be one of the following values:
    286            *     @arg RTC_IT_OW: Overflow interrupt
    287            *     @arg RTC_IT_ALR: Alarm interrupt
    288            *     @arg RTC_IT_SEC: Second interrupt
    289            * @retval The new state of the RTC_IT (SET or RESET).
    290            */

   \                                 In section .text, align 2, keep-with-next
    291          ITStatus RTC_GetITStatus(uint16_t RTC_IT)
    292          {
    293            ITStatus bitstatus = RESET;
   \                     RTC_GetITStatus: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
    294            /* Check the parameters */
    295            //assert_param(IS_RTC_GET_IT(RTC_IT));
    296            
    297            bitstatus = (ITStatus)(RTC->CRL & RTC_IT);
   \   00000002   0x....             LDR.N    R1,??DataTable13_1  ;; 0x40002804
   \   00000004   0x8809             LDRH     R1,[R1, #+0]
   \   00000006   0x4001             ANDS     R1,R0,R1
    298            if (((RTC->CRH & RTC_IT) != (uint16_t)RESET) && (bitstatus != (uint16_t)RESET))
   \   00000008   0x....             LDR.N    R2,??DataTable13  ;; 0x40002800
   \   0000000A   0x8812             LDRH     R2,[R2, #+0]
   \   0000000C   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000000E   0x4202             TST      R2,R0
   \   00000010   0xD004             BEQ.N    ??RTC_GetITStatus_0
   \   00000012   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000014   0x2900             CMP      R1,#+0
   \   00000016   0xD001             BEQ.N    ??RTC_GetITStatus_0
    299            {
    300              bitstatus = SET;
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0xE000             B.N      ??RTC_GetITStatus_1
    301            }
    302            else
    303            {
    304              bitstatus = RESET;
   \                     ??RTC_GetITStatus_0: (+1)
   \   0000001C   0x2000             MOVS     R0,#+0
    305            }
    306            return bitstatus;
   \                     ??RTC_GetITStatus_1: (+1)
   \   0000001E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   0x4770             BX       LR               ;; return
    307          }
    308          
    309          /**
    310            * @brief  Clears the RTC's interrupt pending bits.
    311            * @param  RTC_IT: specifies the interrupt pending bit to clear.
    312            *   This parameter can be any combination of the following values:
    313            *     @arg RTC_IT_OW: Overflow interrupt
    314            *     @arg RTC_IT_ALR: Alarm interrupt
    315            *     @arg RTC_IT_SEC: Second interrupt
    316            * @retval None
    317            */

   \                                 In section .text, align 2, keep-with-next
    318          void RTC_ClearITPendingBit(uint16_t RTC_IT)
    319          {
    320            /* Check the parameters */
    321            //assert_param(IS_RTC_IT(RTC_IT));
    322            
    323            /* Clear the corresponding RTC pending bit */
    324            RTC->CRL &= (uint16_t)~RTC_IT;
   \                     RTC_ClearITPendingBit: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable13_1  ;; 0x40002804
   \   00000002   0x8809             LDRH     R1,[R1, #+0]
   \   00000004   0xEA31 0x0000      BICS     R0,R1,R0
   \   00000008   0x....             LDR.N    R1,??DataTable13_1  ;; 0x40002804
   \   0000000A   0x8008             STRH     R0,[R1, #+0]
    325          }
   \   0000000C   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   0x40002800         DC32     0x40002800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_1:
   \   00000000   0x40002804         DC32     0x40002804

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_2:
   \   00000000   0x4000281C         DC32     0x4000281c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_3:
   \   00000000   0x40002818         DC32     0x40002818

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_4:
   \   00000000   0x40002808         DC32     0x40002808

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_5:
   \   00000000   0x4000280C         DC32     0x4000280c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_6:
   \   00000000   0x40002820         DC32     0x40002820

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_7:
   \   00000000   0x40002824         DC32     0x40002824

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_8:
   \   00000000   0x40002810         DC32     0x40002810

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_9:
   \   00000000   0x40002814         DC32     0x40002814
    326          
    327          /**
    328            * @}
    329            */
    330          
    331          /**
    332            * @}
    333            */
    334          
    335          /**
    336            * @}
    337            */
    338          
    339          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   RTC_ClearFlag
       0   RTC_ClearITPendingBit
       0   RTC_EnterConfigMode
       0   RTC_ExitConfigMode
       0   RTC_GetCounter
       0   RTC_GetDivider
       0   RTC_GetFlagStatus
       0   RTC_GetITStatus
       0   RTC_ITConfig
       8   RTC_SetAlarm
         8   -> RTC_EnterConfigMode
         8   -> RTC_ExitConfigMode
       8   RTC_SetCounter
         8   -> RTC_EnterConfigMode
         8   -> RTC_ExitConfigMode
       8   RTC_SetPrescaler
         8   -> RTC_EnterConfigMode
         8   -> RTC_ExitConfigMode
       0   RTC_WaitForLastTask
       0   RTC_WaitForSynchro


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable13
       4  ??DataTable13_1
       4  ??DataTable13_2
       4  ??DataTable13_3
       4  ??DataTable13_4
       4  ??DataTable13_5
       4  ??DataTable13_6
       4  ??DataTable13_7
       4  ??DataTable13_8
       4  ??DataTable13_9
      14  RTC_ClearFlag
      14  RTC_ClearITPendingBit
      14  RTC_EnterConfigMode
      16  RTC_ExitConfigMode
      20  RTC_GetCounter
      24  RTC_GetDivider
      22  RTC_GetFlagStatus
      34  RTC_GetITStatus
      32  RTC_ITConfig
      26  RTC_SetAlarm
      26  RTC_SetCounter
      30  RTC_SetPrescaler
      10  RTC_WaitForLastTask
      24  RTC_WaitForSynchro

 
 346 bytes in section .text
 
 346 bytes of CODE memory

Errors: none
Warnings: none
