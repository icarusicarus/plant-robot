###############################################################################
#
# IAR ANSI C/C++ Compiler V9.10.2.313/W64 for ARM         03/Nov/2021  18:48:26
# Copyright 1999-2021 IAR Systems AB.
#
#    Cpu mode          =  thumb
#    Endian            =  little
#    Source file       =
#        C:\Users\juhyeonlee\Desktop\Embedded\Libraries\STM32F10x_StdPeriph_Driver_v3.5\src\stm32f10x_crc.c
#    Command line      =
#        -f
#        C:\Users\juhyeonlee\Desktop\Embedded\Debug\Obj\Libraries\stm32f10x_crc.o.rsp
#        (C:\Users\juhyeonlee\Desktop\Embedded\Libraries\STM32F10x_StdPeriph_Driver_v3.5\src\stm32f10x_crc.c
#        -D USE_STDPERIPH_DRIVER -D STM32F10X_CL -lC
#        C:\Users\juhyeonlee\Desktop\Embedded\Debug\List\Libraries -o
#        C:\Users\juhyeonlee\Desktop\Embedded\Debug\Obj\Libraries --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files\IAR Systems\Embedded Workbench
#        9.0\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Users\juhyeonlee\Desktop\Embedded\user\inc\ -I
#        C:\Users\juhyeonlee\Desktop\Embedded\user\ -I
#        C:\Users\juhyeonlee\Desktop\Embedded\Libraries\CMSIS\DeviceSupport\Startup\
#        -I C:\Users\juhyeonlee\Desktop\Embedded\Libraries\CMSIS\DeviceSupport\
#        -I
#        C:\Users\juhyeonlee\Desktop\Embedded\Libraries\STM32F10x_StdPeriph_Driver_v3.5\inc\
#        -I
#        C:\Users\juhyeonlee\Desktop\Embedded\Libraries\STM32F10x_StdPeriph_Driver_v3.5\src\
#        -I C:\Users\juhyeonlee\Desktop\Embedded\Libraries\LCD\ -Ol -I
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        9.0\arm\CMSIS\Core\Include\\" -I "C:\Program Files\IAR
#        Systems\Embedded Workbench 9.0\arm\CMSIS\DSP\Include\\")
#        --dependencies=n
#        C:\Users\juhyeonlee\Desktop\Embedded\Debug\Obj\Libraries\stm32f10x_crc.o.d
#    Locale            =  C
#    List file         =
#        C:\Users\juhyeonlee\Desktop\Embedded\Debug\List\Libraries\stm32f10x_crc.lst
#    Object file       =
#        C:\Users\juhyeonlee\Desktop\Embedded\Debug\Obj\Libraries\stm32f10x_crc.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#      __size_limit    =  32768|ARM.EW.LINKER
#
###############################################################################

C:\Users\juhyeonlee\Desktop\Embedded\Libraries\STM32F10x_StdPeriph_Driver_v3.5\src\stm32f10x_crc.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f10x_crc.c
      4            * @author  MCD Application Team
      5            * @version V3.5.0
      6            * @date    11-March-2011
      7            * @brief   This file provides all the CRC firmware functions.
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     19            ******************************************************************************
     20            */
     21          
     22          /* Includes ------------------------------------------------------------------*/
     23          #include "stm32f10x_crc.h"
     24          
     25          /** @addtogroup STM32F10x_StdPeriph_Driver
     26            * @{
     27            */
     28          
     29          /** @defgroup CRC 
     30            * @brief CRC driver modules
     31            * @{
     32            */
     33          
     34          /** @defgroup CRC_Private_TypesDefinitions
     35            * @{
     36            */
     37          
     38          /**
     39            * @}
     40            */
     41          
     42          /** @defgroup CRC_Private_Defines
     43            * @{
     44            */
     45          
     46          /**
     47            * @}
     48            */
     49          
     50          /** @defgroup CRC_Private_Macros
     51            * @{
     52            */
     53          
     54          /**
     55            * @}
     56            */
     57          
     58          /** @defgroup CRC_Private_Variables
     59            * @{
     60            */
     61          
     62          /**
     63            * @}
     64            */
     65          
     66          /** @defgroup CRC_Private_FunctionPrototypes
     67            * @{
     68            */
     69          
     70          /**
     71            * @}
     72            */
     73          
     74          /** @defgroup CRC_Private_Functions
     75            * @{
     76            */
     77          
     78          /**
     79            * @brief  Resets the CRC Data register (DR).
     80            * @param  None
     81            * @retval None
     82            */

   \                                 In section .text, align 2, keep-with-next
     83          void CRC_ResetDR(void)
     84          {
     85            /* Reset CRC generator */
     86            CRC->CR = CRC_CR_RESET;
   \                     CRC_ResetDR: (+1)
   \        0x0   0x2001             MOVS     R0,#+1
   \        0x2   0x....             LDR.N    R1,??DataTable5
   \        0x4   0x6008             STR      R0,[R1, #+0]
     87          }
   \        0x6   0x4770             BX       LR
     88          
     89          /**
     90            * @brief  Computes the 32-bit CRC of a given data word(32-bit).
     91            * @param  Data: data word(32-bit) to compute its CRC
     92            * @retval 32-bit CRC
     93            */

   \                                 In section .text, align 2, keep-with-next
     94          uint32_t CRC_CalcCRC(uint32_t Data)
     95          {
     96            CRC->DR = Data;
   \                     CRC_CalcCRC: (+1)
   \        0x0   0x....             LDR.N    R1,??DataTable5_1
   \        0x2   0x6008             STR      R0,[R1, #+0]
     97            
     98            return (CRC->DR);
   \        0x4   0x....             LDR.N    R0,??DataTable5_1
   \        0x6   0x6800             LDR      R0,[R0, #+0]
   \        0x8   0x4770             BX       LR
     99          }
    100          
    101          /**
    102            * @brief  Computes the 32-bit CRC of a given buffer of data word(32-bit).
    103            * @param  pBuffer: pointer to the buffer containing the data to be computed
    104            * @param  BufferLength: length of the buffer to be computed					
    105            * @retval 32-bit CRC
    106            */

   \                                 In section .text, align 2, keep-with-next
    107          uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
    108          {
   \                     CRC_CalcBlockCRC: (+1)
   \        0x0   0xB410             PUSH     {R4}
    109            uint32_t index = 0;
   \        0x2   0x2200             MOVS     R2,#+0
    110            
    111            for(index = 0; index < BufferLength; index++)
   \        0x4   0x2200             MOVS     R2,#+0
   \        0x6   0xE004             B.N      ??CRC_CalcBlockCRC_0
    112            {
    113              CRC->DR = pBuffer[index];
   \                     ??CRC_CalcBlockCRC_1: (+1)
   \        0x8   0xF850 0x3022      LDR      R3,[R0, R2, LSL #+2]
   \        0xC   0x....             LDR.N    R4,??DataTable5_1
   \        0xE   0x6023             STR      R3,[R4, #+0]
    114            }
   \       0x10   0x1C52             ADDS     R2,R2,#+1
   \                     ??CRC_CalcBlockCRC_0: (+1)
   \       0x12   0x428A             CMP      R2,R1
   \       0x14   0xD3F8             BCC.N    ??CRC_CalcBlockCRC_1
    115            return (CRC->DR);
   \       0x16   0x....             LDR.N    R0,??DataTable5_1
   \       0x18   0x6800             LDR      R0,[R0, #+0]
   \       0x1A   0xBC10             POP      {R4}
   \       0x1C   0x4770             BX       LR
    116          }
    117          
    118          /**
    119            * @brief  Returns the current CRC value.
    120            * @param  None
    121            * @retval 32-bit CRC
    122            */

   \                                 In section .text, align 2, keep-with-next
    123          uint32_t CRC_GetCRC(void)
    124          {
    125            return (CRC->DR);
   \                     CRC_GetCRC: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable5_1
   \        0x2   0x6800             LDR      R0,[R0, #+0]
   \        0x4   0x4770             BX       LR
    126          }
    127          
    128          /**
    129            * @brief  Stores a 8-bit data in the Independent Data(ID) register.
    130            * @param  IDValue: 8-bit value to be stored in the ID register 					
    131            * @retval None
    132            */

   \                                 In section .text, align 2, keep-with-next
    133          void CRC_SetIDRegister(uint8_t IDValue)
    134          {
    135            CRC->IDR = IDValue;
   \                     CRC_SetIDRegister: (+1)
   \        0x0   0x....             LDR.N    R1,??DataTable5_2
   \        0x2   0x7008             STRB     R0,[R1, #+0]
    136          }
   \        0x4   0x4770             BX       LR
    137          
    138          /**
    139            * @brief  Returns the 8-bit data stored in the Independent Data(ID) register
    140            * @param  None
    141            * @retval 8-bit value of the ID register 
    142            */

   \                                 In section .text, align 2, keep-with-next
    143          uint8_t CRC_GetIDRegister(void)
    144          {
    145            return (CRC->IDR);
   \                     CRC_GetIDRegister: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable5_2
   \        0x2   0x7800             LDRB     R0,[R0, #+0]
   \        0x4   0xB2C0             UXTB     R0,R0
   \        0x6   0x4770             BX       LR
    146          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \        0x0   0x4002'3008        DC32     0x40023008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \        0x0   0x4002'3000        DC32     0x40023000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \        0x0   0x4002'3004        DC32     0x40023004
    147          
    148          /**
    149            * @}
    150            */
    151          
    152          /**
    153            * @}
    154            */
    155          
    156          /**
    157            * @}
    158            */
    159          
    160          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   CRC_CalcBlockCRC
       0   CRC_CalcCRC
       0   CRC_GetCRC
       0   CRC_GetIDRegister
       0   CRC_ResetDR
       0   CRC_SetIDRegister


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
      30  CRC_CalcBlockCRC
      10  CRC_CalcCRC
       6  CRC_GetCRC
       8  CRC_GetIDRegister
       8  CRC_ResetDR
       6  CRC_SetIDRegister

 
 80 bytes in section .text
 
 80 bytes of CODE memory

Errors: none
Warnings: none
